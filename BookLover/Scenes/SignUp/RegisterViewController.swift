//
//  RegisterViewController.swift
//  BookLover
//
//  Created by ios 7 on 09/05/18.
//  Copyright (c) 2018 iOS Team. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit
import CoreLocation


protocol RegisterDisplayLogic: class
{
  func displaySignUpResponse(viewModel: Register.ViewModel)
  func displayWrongPassword(confirmPassword:Bool)
  func displayWrongEmail()

}

class RegisterViewController: UIViewController, RegisterDisplayLogic
{
  var interactor: RegisterBusinessLogic?
  var router: (NSObjectProtocol & RegisterRoutingLogic & RegisterDataPassing)?

    @IBOutlet weak var tfLastName: SkyFloatingLabelTextField!
    
    @IBOutlet weak var tfName: SkyFloatingLabelTextField!
    @IBOutlet weak var tfEmail: SkyFloatingLabelTextField!
    @IBOutlet weak var tfPassword: SkyFloatingLabelTextField!
    @IBOutlet weak var tfConfirmPassword: SkyFloatingLabelTextField!
    
    
    @IBOutlet weak var btnRegister: UIButtonFontSize!
    @IBOutlet weak var btnLogin: UIButtonFontSize!
    @IBOutlet weak var lblHaveAnAccount: UILabelFontSize!
     let locationManager = CLLocationManager()
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = RegisterInteractor()
    let presenter = RegisterPresenter()
    let router = RegisterRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    startLocationManager()
   setUpUIDesign()
    
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    func startLocationManager() {
        
        locationManager.requestAlwaysAuthorization()
        
        // For use in foreground
        locationManager.requestWhenInUseAuthorization()
        
        if CLLocationManager.locationServicesEnabled() {
            locationManager.delegate = self
            switch CLLocationManager.authorizationStatus() {
            case .notDetermined, .restricted, .denied:
                print("No access")
            case .authorizedAlways, .authorizedWhenInUse:
                locationManager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
                locationManager.startUpdatingLocation()
            }
        }
    }
    
    func setUpUIDesign() {
        
        CustomNavigationItems.sharedInstance.setNavigationBarApperrance(onVC: self, withTitle: localizedTextFor(key: OnBoardingModuleText.RegisterButtonTitle.rawValue))
        CustomNavigationItems.sharedInstance.leftBarButton(onVC: self)
        
        tfName.placeholder = localizedTextFor(key: OnBoardingModuleText.NameTextFieldPlaceholder.rawValue)
        tfLastName.placeholder = localizedTextFor(key: OnBoardingModuleText.LastNamePlaceholder.rawValue)
        tfPassword.placeholder = localizedTextFor(key: OnBoardingModuleText.PasswordTextFieldPlaceholder.rawValue)
        tfEmail.placeholder = localizedTextFor(key: OnBoardingModuleText.EmailAddressPlaceholder.rawValue)
        tfConfirmPassword.placeholder = localizedTextFor(key: OnBoardingModuleText.ConfirmPasswordPlaceholder.rawValue)
        
        btnRegister.setTitle(localizedTextFor(key: OnBoardingModuleText.RegisterButtonTitle.rawValue), for: .normal)
        btnRegister.layer.cornerRadius = btnRegister.frame.size.height/2.0
        lblHaveAnAccount.text = localizedTextFor(key: OnBoardingModuleText.AlreadyHaveAccountTitle.rawValue)
        
        btnLogin.setAttributedTitle((localizedTextFor(key: SceneTitleText.loginSceneTitle.rawValue)).underLine(color: appThemeColor, font: btnLogin.titleLabel?.font), for: .normal)
    }
    
    
    func showLocationAlert() {
        
        let alert = UIAlertController(title: localizedTextFor(key: GeneralText.appName.rawValue), message: localizedTextFor(key: ValidationsText.kNetworkError.rawValue), preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: { (action) in
            
            
        }))
        self.present(alert, animated: true, completion: nil)
    }
    
    
    func displaySignUpResponse(viewModel: Register.ViewModel) {
        if let error = viewModel.error {
            CustomAlertController.sharedInstance.showErrorAlert(error: error)
            self.displayWrongPassword(confirmPassword: true)
        } else {
            CustomAlertController.sharedInstance.showSuccessAlert(success: viewModel.message!)
            tfName.text = ""
            tfLastName.text = ""
            tfConfirmPassword.text = ""
            tfEmail.text = ""
            tfPassword.text = ""
            router?.navigateBack()
        }
    }
    
    func displayWrongPassword(confirmPassword:Bool) {
        if  confirmPassword == true {
            tfPassword.text = ""
        }
        tfConfirmPassword.text = ""
    }
    
    func displayWrongEmail() {
        tfEmail.text = ""
    }
    
    //MARK:- Interface Builder Action --
    
    @IBAction func actionLogin(_ sender: UIButton) {
        self.view.endEditing(true)
        router?.navigateBack()
    }
    
    @IBAction func actionRegister(_ sender: UIButton) {
        self.view.endEditing(true)
        
        let registerRequest = Register.Request(name: tfName.text_Trimmed(), email: tfEmail.text_Trimmed(), password: tfPassword.text_Trimmed(), confirmPassword: tfConfirmPassword.text_Trimmed(), lastName: tfLastName.text_Trimmed())
        interactor?.signUpAPI(request: registerRequest)
    }
  
}

extension RegisterViewController : UITextFieldDelegate {
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        
        if textField == tfConfirmPassword || textField == tfPassword || textField == tfEmail {
            if (string == " ") {
                return false
            }
            return true
        } else if textField == tfName || textField == tfLastName {
            let cs = NSCharacterSet(charactersIn: ACCEPTABLE_NAMETEXT).inverted
            let filtered = string.components(separatedBy: cs).joined(separator: "")
            return (string == filtered)
        } else {
            return true
        }
    }
}


extension RegisterViewController : CLLocationManagerDelegate {
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let locValue: CLLocationCoordinate2D = manager.location?.coordinate else { return }
        print("locations = \(locValue.latitude) \(locValue.longitude)")
        userDefault.set("\(locValue.latitude)", forKey: userDefualtKeys.userLat.rawValue)
        userDefault.set("\(locValue.longitude)", forKey: userDefualtKeys.userLong.rawValue)
        locationManager.stopUpdatingLocation()
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        printToConsole(item: "Error in getting location \(error.localizedDescription)")
    }
    
    func locationManager(_ manager: CLLocationManager,
                         didChangeAuthorization status: CLAuthorizationStatus) {   switch status {
    case .restricted, .denied:
        // Disable your app's location features
        break
        
    case .authorizedWhenInUse:
        // Enable only your app's when-in-use features.
        break
        
    case .authorizedAlways:
        // Enable any of your app's location services.
        break
        
    case .notDetermined:
        break
        }
    }
}
