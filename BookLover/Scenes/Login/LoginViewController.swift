//
//  LoginViewController.swift
//  BookLover
//
//  Created by ios 7 on 08/05/18.
//  Copyright (c) 2018 iOS Team. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func displayLoginResponse(viewModel: Login.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

    @IBOutlet weak var tfUserName: SkyFloatingLabelTextField!
    
    @IBOutlet weak var tfPassword: SkyFloatingLabelTextField!
    
    @IBOutlet weak var btnForgotPassword: UIButtonFontSize!
    
    @IBOutlet weak var btnLogin: UIButtonFontSize!
    
    @IBOutlet weak var lblOr: UILabelFontSize!
    
    @IBOutlet weak var btnFbLogin: UIButtonFontSize!
    
    @IBOutlet weak var lblNewHere: UILabelFontSize!
    
    @IBOutlet weak var btnRegister: UIButtonFontSize!
    
    // MARK: Interface Builder Outlets
    

    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
  }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
       
        setUpInterface()
    }
    
    func setUpInterface() {
        
      CustomNavigationItems.sharedInstance.setNavigationBarApperrance(onVC: self, withTitle: localizedTextFor(key: SceneTitleText.loginSceneTitle.rawValue))
        CustomNavigationItems.sharedInstance.leftBarButton(onVC: self)
        
        tfUserName.placeholder = localizedTextFor(key: OnBoardingModuleText.EmailAddressPlaceholder.rawValue)
        tfPassword.placeholder = localizedTextFor(key: OnBoardingModuleText.PasswordTextFieldPlaceholder.rawValue)
        
        btnForgotPassword.setAttributedTitle((localizedTextFor(key: OnBoardingModuleText.ForgotPasswordButtonTitle.rawValue)).underLine(color:appThemeColor, font: btnRegister.titleLabel?.font), for: .normal)

        btnLogin.layer.cornerRadius  = btnLogin.frame.size.height/2.0
        btnLogin.setTitle(localizedTextFor(key: OnBoardingModuleText.LoginButtonTitle.rawValue), for: .normal)
        btnFbLogin.layer.cornerRadius  = btnFbLogin.frame.size.height/2.0
        btnFbLogin.setTitle(localizedTextFor(key: OnBoardingModuleText.LoginWithFBButtonTitle.rawValue), for: .normal)
        
        btnRegister.setAttributedTitle((localizedTextFor(key: OnBoardingModuleText.RegisterButtonTitle.rawValue)).underLine(color:appThemeColor, font: btnRegister.titleLabel?.font), for: .normal)

        lblOr.text = localizedTextFor(key: OnBoardingModuleText.OrTitle.rawValue)
        lblNewHere.text = localizedTextFor(key: OnBoardingModuleText.NewHereTitle.rawValue)
        
//        tfUserName.text = "mss.iosteam@gmail.com";
//        tfPassword.text = "123456"
    }
    
    func displayLoginResponse(viewModel: Login.ViewModel) {
        if let error = viewModel.error {
            DispatchQueue.main.async {
                CustomAlertController.sharedInstance.showErrorAlert(error: error)
            }
        } else {
            if viewModel.isCompleted == true {
                CommonFunctions.sharedInstance.navigateToHome(nav: self.navigationController!)
            } else {
                router?.navigateToCompleteProfileScene()
            }
        }
    }
    
    //MARK: - Interface Builder Action --
    
    @IBAction func actionForgotPassword(_ sender: UIButton) {
        router?.navigateToForgotPassword()
    }
    
    @IBAction func actionLogin(_ sender: UIButton) {

        self.view.endEditing(true)
        let loginRequest = Login.Request(email: tfUserName.text_Trimmed(), password: tfPassword.text_Trimmed(), token: nil)
        interactor?.loginAPI(request: loginRequest)
    }
    
    @IBAction func actionLoginWithFb(_ sender: UIButton) {
        
        
        FbHelper.fb_LoginWith(arrPermision: nil, vc: self) { [unowned self] ( res,err ) -> (Void) in

            if err != nil {
                CustomAlertController.sharedInstance.showErrorAlert(error:(err?.localizedDescription)!)
            } else {
                let loginRequest = Login.Request(email: self.tfUserName.text_Trimmed(), password: self.tfPassword.text_Trimmed(), token: res!)
                self.interactor?.loginAPI(request: loginRequest)
            }
        }
    }
    
    @IBAction func actionRegister(_ sender: UIButton) {
        router?.navigateToRegisterScene()
    }
    
}

extension LoginViewController : UITextFieldDelegate {
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        
        if textField == tfUserName || textField == tfPassword {
            if (string == " ") {
                return false
            }
            return true
        } else {
            return true
        }
    }
}
