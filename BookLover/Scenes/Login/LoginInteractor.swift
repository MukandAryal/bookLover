//
//  LoginInteractor.swift
//  BookLover
//
//  Created by ios 7 on 08/05/18.
//  Copyright (c) 2018 iOS Team. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
    func loginAPI(request: Login.Request) 
}

protocol LoginDataStore
{
  //var name: String { get set }
    
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
  var presenter: LoginPresentationLogic?
  var worker: LoginWorker?
  //var name: String = ""
  
  // MARK: Do something
    func loginAPI(request: Login.Request)  {
        
        if isValidRequest(request: request) {
            
            worker = LoginWorker()
            
            var param = [String:String]()
            
            if request.token != nil {
                param.updateValue(request.token!, forKey: "token")
            } else {
                param.updateValue(request.password!, forKey: "password")
                param.updateValue(request.email!, forKey: "email")
                param.updateValue(userDefault.value(forKey: "DeviceToken") as! String, forKey: "device_token")
                param.updateValue("iOS", forKey: "device_type")
                param.updateValue("", forKey: "deviceId")
            }
            
            worker?.hitLoginApi(parameters: param , apiResponse: { (response) in
                if response.code == SuccessCode {
                    // saving userID/Token
                    let result = response.result as! NSDictionary
                    userDefault.set(result["user_id"] as? Int16, forKey: userDefualtKeys.user_Id.rawValue)
                    userDefault.set(result["token"] as? String, forKey: userDefualtKeys.user_Token.rawValue)
                    userDefault.set(true, forKey: userDefualtKeys.userLoggedIn.rawValue)
                }
                self.presenter?.presentLoginResponse(response: response)
            })
        }
    }
    
    func isValidRequest(request: Login.Request) -> Bool {
        
        var isValid = true
        let validator = Validator()
        
        if request.token != nil {
            return isValid
        } else {
            if !validator.requiredValidation(request.email!, errorKey: localizedTextFor(key: GeneralValidations.EnterEmailKey.rawValue)) {
                isValid = false
            } else if !validator.emailValidation(request.email!, errorKey: localizedTextFor(key: GeneralValidations.InvalidEmailKey.rawValue)) {
                isValid = false
            } else if !validator.requiredValidation(request.password!, errorKey: localizedTextFor(key: GeneralValidations.EnterPasswordKey.rawValue)) {
                isValid = false
            }
        }
        
        return isValid
    }
    
//    func signInWithFb(vc: UIViewController) {
//
//        worker = LoginWorker()
//        worker?.getFbAccesTokenAt(vc: vc, completion: { ( res, err) -> (Void) in
//
//            if err != nil {
//                AppCommon.PrintLogs(printStatement:"Error -- \(String(describing: err?.localizedDescription))")
//                self.presenter?.presentSignInFailureResponse(response: Login.Response.FailureResponse(loginFailureResponse: err?.localizedDescription))
//            } else {
//                AppCommon.PrintLogs(printStatement:"Social Login res - \(res!)")
//                if (res![StatusKey] as! String) == SuccessKey
//                {
//                    let msgDict = res![MessageKey] as! [String:Any]
//                    self.presenter?.presentSignInSuccessResponse(response: Login.Response.SuccessResponse(loginSuccessResponse: msgDict))
//                }else {
//                    self.presenter?.presentSignInFailureResponse(response: Login.Response.FailureResponse(loginFailureResponse: (res![MessageKey] as! String)))
//                }
//            }
//
//        })
//
//    }
    
}
