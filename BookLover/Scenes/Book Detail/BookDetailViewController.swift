//
//  BookDetailViewController.swift
//  BookLover
//
//  Created by ios 7 on 28/05/18.
//  Copyright (c) 2018 iOS Team. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Cosmos

typealias DetailBookShelfPopUp = (_ status: Int) -> ()


protocol BookDetailDisplayLogic: class
{
    func displayBookDetail(viewModel: BookDetail.ViewModel)
    func displayLikeUnlikeReview(viewModel : ShowAllReview.LikeUnlikeModel, atIndex: Int)
    func displayFavUnfavourite(viewModel : BookDetail.ViewModel.FavUnfavorite) 
}

class BookDetailViewController: UIViewController, BookDetailDisplayLogic
{
    var interactor: BookDetailBusinessLogic?
    var router: (NSObjectProtocol & BookDetailRoutingLogic & BookDetailDataPassing)?
    
    
    // MARK: Interface Builder Outlet
    
    @IBOutlet weak var imgBook: UIImageView!
    @IBOutlet weak var lblName: UILabelFontSize!
    
    @IBOutlet weak var llbPages: UILabelFontSize!
    @IBOutlet weak var lblIsbnNo: UILabelFontSize!
    @IBOutlet weak var lblPublisher: UILabelFontSize!
    @IBOutlet weak var lblAuther: UILabelFontSize!
    @IBOutlet weak var lblCategory: UILabelFontSize!
    @IBOutlet weak var myScrollView: UIScrollView!
    
    @IBOutlet weak var bookRatingView: CosmosView!
    @IBOutlet weak var userRatingView: CosmosView!

    @IBOutlet weak var btnReviews: UIButtonFontSize!
    
    @IBOutlet weak var btnShare: UIButtonFontSize!
    @IBOutlet weak var btnShelves: UIButtonFontSize!
    
    @IBOutlet weak var btnRateBook: UIButtonFontSize!
    @IBOutlet weak var tvBookDescription: UITextView!
    @IBOutlet weak var lblDescTitle: UILabelFontSize!
    
    @IBOutlet weak var tblReview: UITableView!
    
    @IBOutlet weak var btnFavUnfav: UIBarButtonItem!
    @IBOutlet weak var userReviewView: UIView!
    
    @IBOutlet weak var tblHeaderView: UIView!
    @IBOutlet weak var tblFooterView: UIView!
    @IBOutlet weak var btnWriteReview: UIButtonFontSize!
    @IBOutlet weak var btnAllReviews: UIButtonFontSize!
    @IBOutlet weak var lblReviewTitle: UILabelFontSize!
    
    @IBOutlet weak var tblTopHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var tblHeightConstraint: NSLayoutConstraint!
    
    @IBOutlet weak var tvDescription: UITextView!
    @IBOutlet weak var btnUser: UIButtonFontSize!
    
    @IBOutlet weak var lblUserName: UILabelFontSize!
    
    @IBOutlet weak var btnReviewDetail: UIButtonFontSize!
    @IBOutlet weak var btnComment: UIButtonFontSize!
    @IBOutlet weak var btnLike: UIButtonFontSize!
    @IBOutlet weak var lblDate: UILabelFontSize!
   
    
    var isTableLoading: Bool?
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = BookDetailInteractor()
        let presenter = BookDetailPresenter()
        let router = BookDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    private var lastContentOffset: CGFloat = 0
    var booksDetail = BookDetail.ViewModel.Books()
    var reviewList = [BookDetail.ViewModel.Review]()
    var userReview = BookDetail.ViewModel.User_Review()
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        if #available(iOS 11.0, *) {
            myScrollView?.contentInsetAdjustmentBehavior = .always
        }
        tblReview.addObserver(self, forKeyPath: "contentSize", options: .new, context: nil)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setUpUIDesign()
        getBookDetail()
    }
    
    deinit {
        do {
            self.tblReview.removeObserver(self, forKeyPath: "contentSize")
        }
    }
    

    func getBookDetail()
    {
        interactor?.getBookDetail()
    }
    
    func displayBookDetail(viewModel: BookDetail.ViewModel)
    {
        if viewModel.error != nil {
            CustomAlertController.sharedInstance.showErrorAlert(error: viewModel.error!)
        } else {
            booksDetail = viewModel.books!
            if viewModel.userReview != nil {
                userReview = viewModel.userReview!
                printToConsole(item: userReview)
            } else {
                userReview = BookDetail.ViewModel.User_Review()
            }
            if (viewModel.reviewList?.count)! > 0 {
                reviewList = viewModel.reviewList!
                 printToConsole(item: reviewList)
            } else {
                reviewList = [BookDetail.ViewModel.Review]()
            }
            updateUIWithData(viewModel: viewModel)
        }
    }
    
    func displayLikeUnlikeReview(viewModel : ShowAllReview.LikeUnlikeModel, atIndex: Int) {
        
        if viewModel.error != nil {
            CustomAlertController.sharedInstance.showErrorAlert(error: viewModel.error!)
        } else {
            interactor?.getBookDetail()
        }
    }
    
    func displayFavUnfavourite(viewModel : BookDetail.ViewModel.FavUnfavorite) {
        
        if viewModel.error != nil {
            CustomAlertController.sharedInstance.showSuccessAlert(success: viewModel.error!)
        } else {
            CustomAlertController.sharedInstance.showSuccessAlert(success: viewModel.success!)
            
            var shelfData = booksDetail.shelves![0]
            shelfData.is_favourite = shelfData.is_favourite == true ? false : true
            booksDetail.shelves![0] = shelfData
            setRightBarButtonApperance()
        }
    }
    
    // MARK: Interface Builder Action
    
    @IBAction func actionMyReviewDetail(_ sender: UIButton) {
        if userReview.id != nil {
            router?.navigateToUserReview(reviewId: "\(userReview.id!)")
        }
    }
    
    @IBAction func actionFavUnfavBook(_ sender: UIBarButtonItem) {
        
        if CommonFunctions.sharedInstance.isUserLoggedIn() {
            if let _ = booksDetail.id {
                if (booksDetail.shelves?.count)! > 0 {
                    
                    let likeStatus = ((booksDetail.shelves)![0].is_favourite)! == true ? false : true
                    let req = BookDetail.Request.FavUnfavorite.init(status: likeStatus, shelveId: "\(((booksDetail.shelves)![0].id)!)")
                    interactor?.favUnfavoriteBook(request: req)
                    
                } else {
                    CustomAlertController.sharedInstance.showErrorAlert(error: localizedTextFor(key: HomeValidationText.AddToShelf.rawValue))
                }
            }
        } else {
            CustomAlertController.sharedInstance.showLoginFirstAlert()
        }
    }
    
    @IBAction func actionAllReviews(_ sender: UIButton) {
        if let _ = booksDetail.id {
            router?.navigateToAllReview(bookId: "\((booksDetail.id!))")

        }
    }
    
    
    @IBAction func actionLikeUnlikeUserReview(_ sender: UIButton) {
        if CommonFunctions.sharedInstance.isUserLoggedIn() == true {
            if let _ = booksDetail.id  {
                
                var isLike : Bool = false
                if userReview.is_like == true {
                    isLike = false
                } else {
                    isLike = true
                }
                
                let likeReq = ShowAllReview.Request.LikeUnlike(
                    reviewId: "\(userReview.id!)",
                    isLike: isLike,
                    index: sender.tag)
                interactor?.likeUnlikeReview(request: likeReq)
                
            }
        }else{
            CustomAlertController.sharedInstance.showLoginFirstAlert()
        }
    }
    
    @IBAction func actionBookReview(_ sender: UIButton) {
        if let _ = booksDetail.id  {
            router?.navigateToAllReview(bookId: "\((booksDetail.id!))")
        }
    }
    
    @IBAction func actionShareBook(_ sender: UIButton) {
        
        if CommonFunctions.sharedInstance.isUserLoggedIn() == true {
            if let _ = booksDetail.id  {
                router?.navigateToShare(bookId: "\((booksDetail.id!))")
            }
        }else{
            CustomAlertController.sharedInstance.showLoginFirstAlert()
        }
    }
    
    @IBAction func actionAddToShelf(_ sender: UIButton) {
        
        if CommonFunctions.sharedInstance.isUserLoggedIn() == true {
            if let _ = booksDetail.id {
                var status: Int?
                var isLike: Bool?
                if (booksDetail.shelves?.count)! > 0 {
                    status = (booksDetail.shelves)![0].shelf_status
                    isLike = (booksDetail.shelves)![0].is_favourite
                } else {
                    status = 3
                    isLike = false
                }
                
                let data:[String:Any] = ["book_id":booksDetail.id!,"shelf_status":status!,"is_favourite":isLike!, "isFrom":"Detail", "cover_photo":booksDetail.cover_photo!, "name":booksDetail.name!]
                router?.navigateToBookShelves(withData: data)
            }
            
        } else {
            CustomAlertController.sharedInstance.showLoginFirstAlert()
        }
    }
    
    @IBAction func actionRateTheBook(_ sender: UIButton?) {
        if CommonFunctions.sharedInstance.isUserLoggedIn() == true {
            
             if let _ = booksDetail.id {

                    router?.navigateToRatingView(bookId: "\((booksDetail.id!))")
               // }
            }
            
        }else{
            CustomAlertController.sharedInstance.showLoginFirstAlert()
        }
    }
    
    @IBAction func actionUserProfile(_ sender: UIButton) {
        if let _ =  userReview.user_id {
            router?.navigateToUserProfile(withId: "\(userReview.user_id!)")
        }
    }
    
    // MARK: Cell Button Method --
    
    @objc func actionLikeUnlikeReview (sender: UIButton) {
        
        if CommonFunctions.sharedInstance.isUserLoggedIn() == true {
            if let _ =  booksDetail.id {
                
                var isLike : Bool = false
                if reviewList[sender.tag].is_Like == true {
                    isLike = false
                } else {
                    isLike = true
                }
                
                let likeReq = ShowAllReview.Request.LikeUnlike(
                    reviewId: "\(reviewList[sender.tag].id!)",
                    isLike: isLike,
                    index: sender.tag)
                interactor?.likeUnlikeReview(request: likeReq)
            }
           
        }else{
            CustomAlertController.sharedInstance.showLoginFirstAlert()
        }
    }
    
    
    @objc func actionViewUserReview (sender: UIButton) {
        
        if  reviewList.count > 0 {
            router?.navigateToUserReview(reviewId: "\(reviewList[sender.tag].id!)")
        }
    }
    
    @objc func actionViewUserProfile (sender: UIButton) {
        if  reviewList.count > 0 {
            let userId = "\((reviewList[sender.tag].user?.id)!)"
            router?.navigateToUserProfile(withId: userId)
        }
    }
    
    // MARK: Class Helper
    
    func setUpUIDesign() {
        
        CustomNavigationItems.sharedInstance.setNavigationBarApperrance(onVC: self, withTitle: localizedTextFor(key: SceneTitleText.DetailSceneTitle.rawValue))
        CustomNavigationItems.sharedInstance.leftBarButton(onVC: self)
        
        userRatingView.settings.fillMode = .full
        bookRatingView.settings.fillMode = .full

        tblReview.estimatedRowHeight = 125
        tblReview.rowHeight = UITableViewAutomaticDimension
        isTableLoading = false

        tblReview.tableHeaderView = tblHeaderView
        tblReview.tableFooterView = tblFooterView
        lblCategory.textColor = appThemeColor
        lblAuther.text = localizedTextFor(key: BookDetailText.AuthorTitle.rawValue) + " : "
        lblPublisher.text = localizedTextFor(key: BookDetailText.PublisherTitle.rawValue) + " : "
        lblIsbnNo.text = localizedTextFor(key: BookDetailText.IsbnTitle.rawValue) + " : "
        llbPages.text = localizedTextFor(key: BookDetailText.TotalPageTitle.rawValue) + " : "
        
        btnReviews.setTitle(localizedTextFor(key: GeneralText.ReviewsTitle.rawValue), for: .normal)
        btnReviews.setTitleColor(appThemeColor, for: .normal)
        btnShare.setTitle(localizedTextFor(key: BookDetailText.ShareTitle.rawValue), for: .normal)
        btnShare.setTitleColor(appThemeColor, for: .normal)
        btnShelves.setTitle(localizedTextFor(key: BookDetailText.BookShelfTitle.rawValue), for: .normal)
        btnShelves.setTitleColor(appThemeColor, for: .normal)
        btnRateBook.setTitle(localizedTextFor(key: BookDetailText.RateTheBookTitle.rawValue), for: .normal)
        lblDescTitle.text = localizedTextFor(key: BookDetailText.BookDescTitle.rawValue)
        lblDescTitle.textColor = appThemeColor
        
        lblReviewTitle.text = localizedTextFor(key: GeneralText.ReviewsTitle.rawValue).uppercased()
        btnWriteReview.layer.cornerRadius = 4.0
        btnWriteReview.setTitle(localizedTextFor(key: BookDetailText.WriteReviewTitle.rawValue), for: .normal)
        btnAllReviews.setTitle(localizedTextFor(key: BookDetailText.AllReviewTitle.rawValue), for: .normal)
    }
    
    
    func updateUIWithData(viewModel: BookDetail.ViewModel) {
        
        // Update User Review Section --
        
        if viewModel.userReview != nil {
            
            var strImg : String = ""
            if appDelegateObj.userData["user_image"] != nil, let _ = appDelegateObj.userData["user_image"] as? String {
                strImg = Configurator.imageBaseUrl + (appDelegateObj.userData["user_image"] as! String)
            }
            
            let strName : NSMutableString = ""
            if appDelegateObj.userData["firstname"] != nil, let _ = appDelegateObj.userData["firstname"] as? String {
                strName.append((appDelegateObj.userData["firstname"] as? String)!)
                strName.append(" ")
            }
            
            if appDelegateObj.userData["lastname"] != nil, let _ = appDelegateObj.userData["lastname"] as? String {
                strName.append((appDelegateObj.userData["lastname"] as? String)!)
            }
            
            lblUserName.text = strName as String
            btnUser.layer.cornerRadius = btnUser.frame.size.height/2.0
            btnUser.clipsToBounds = true
            btnUser.sd_setImage(with: URL(string: strImg), for: .normal, placeholderImage: UIImage(named: "profile_photo"))
            let str = viewModel.userReview!.created_at?.components(separatedBy: "T")[0]
            let date = CommonFunctions.sharedInstance.generateDate(str!, format: .format11)
            let strDate = CommonFunctions.sharedInstance.generateDateString(date, format: .format6)
            lblDate.text = strDate
            tvDescription.text = viewModel.userReview!.description
            userRatingView.rating = viewModel.userReview!.rating!
            userRatingView.text = "\(Float(viewModel.userReview!.rating!))"

            if (viewModel.userReview!.likeCount)! > 0 {
                btnLike.setTitle(" \((viewModel.userReview!.likeCount)!) ", for: .normal)
            } else {
                btnLike.setTitle("  ", for: .normal)
            }
            
            btnLike.setImage(UIImage(named: "like_white-1")?.withRenderingMode(.alwaysTemplate), for: .normal)
            if viewModel.userReview!.is_like == true {
                btnLike.tintColor = appThemeColor
            } else {
                btnLike.tintColor = UIColor.white
            }
            btnLike.setTitleColor(UIColor.white, for: .normal)
            
            if (viewModel.userReview!.commentCount)! > 0 {
                btnComment.setTitle(" \((viewModel.userReview!.commentCount)!) ", for: .normal)
            } else {
                btnComment.setTitle("  ", for: .normal)
            }

            userReviewView.layoutIfNeeded()
            tblTopHeightConstraint.constant = userReviewView.frame.size.height + 40
            userReviewView.isHidden = false
        } else {
            tblTopHeightConstraint.constant = 20
            userReviewView.isHidden = true
        }

        // Update All Review Section --
        
        if (viewModel.reviewList?.count)! > 0 {
            
            if viewModel.userReview == nil {
                btnWriteReview.isHidden = true
            } else{
                
                if (booksDetail.shelves?.count)! > 0 {
                    if booksDetail.shelves![0].shelf_status == 2 {
                        btnWriteReview.isHidden = false
                    } else {
                        btnWriteReview.isHidden = true
                    }
                } else {
                    btnWriteReview.isHidden = true
                }
                
                btnWriteReview.setTitle(localizedTextFor(key: BookDetailText.WriteReviewTitle.rawValue), for: .normal)
            }
            tblReview.tableHeaderView = tblHeaderView
            tblReview.tableFooterView = tblFooterView
        } else {
            tblReview.tableHeaderView = UIView()
            tblReview.tableFooterView = UIView()
        }
        tblReview.reloadData()
        
        // Update BookDetail Section --
        lblName.text = viewModel.books?.name
        lblCategory.text = viewModel.books?.category?.name
        imgBook.sd_setImage(with: URL(string:(viewModel.books?.cover_photo)!), placeholderImage: UIImage(named: "defaultBookImage"))
        lblAuther.text = localizedTextFor(key: BookDetailText.AuthorTitle.rawValue) + " : " + (viewModel.books?.author_name)!
        lblPublisher.text = localizedTextFor(key: BookDetailText.PublisherTitle.rawValue) + " : " + (viewModel.books?.publisher_name)!
        lblIsbnNo.text = localizedTextFor(key: BookDetailText.IsbnTitle.rawValue) + " : " + (viewModel.books?.isbn_no)!
        llbPages.text = localizedTextFor(key: BookDetailText.TotalPageTitle.rawValue) + " : \((viewModel.books?.pages)!)"
        
        
        btnReviews.setTitle(localizedTextFor(key: GeneralText.ReviewsTitle.rawValue) + "(\((viewModel.books!.review_count)!))", for: .normal)
        tvBookDescription.text = viewModel.books?.description

        
        if viewModel.userReview == nil {
            btnRateBook.isHidden = true
        } else{
            btnRateBook.isHidden = false
            
            if (booksDetail.shelves?.count)! > 0 {
                if booksDetail.shelves![0].shelf_status == 2 {
                    btnRateBook.isHidden = false
                } else {
                    btnRateBook.isHidden = true
                }
            } else {
                btnRateBook.isHidden = true
            }
            btnRateBook.setTitle(localizedTextFor(key: BookDetailText.RateTheBookTitle.rawValue), for: .normal)
        }
        
        btnShelves.setImage(UIImage(named: "bookself_1")?.withRenderingMode(.alwaysTemplate), for: .normal)
        if (booksDetail.shelves?.count)! > 0 {
            btnShelves.tintColor = appThemeColor
        } else {
            btnShelves.tintColor = UIColor.gray
        }
        
        btnShelves.setTitleColor(appThemeColor, for: .normal)

        setRightBarButtonApperance()
    }
    
    
    func setRightBarButtonApperance() {
        
        if (booksDetail.shelves?.count)! > 0 {
            
            if booksDetail.shelves![0].is_favourite == true {
                btnFavUnfav.tintColor = appThemeColor
            } else {
                btnFavUnfav.tintColor = UIColor.gray
            }
        } else {
            btnFavUnfav.tintColor = UIColor.gray
        }
    }
    
    func performBookPopUpAction() -> DetailBookShelfPopUp {

        return { [unowned self] status in
            if status >= 3 {
                return
            }else{
                if self.booksDetail.shelves![0].shelf_status == 2{
                    self.actionRateTheBook(nil)
                }
            }
        }
    }
    
    //MARK: - KVO Methods --
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if let obj = object as? UITableView {
            
            if obj == tblReview && keyPath == "contentSize" {
                isTableLoading = true
                if (change?[NSKeyValueChangeKey.newKey] as? CGSize) != nil {
                    tblHeightConstraint.constant = ((change?[NSKeyValueChangeKey.newKey] as? CGSize)?.height)!
                }
            }
        }
    }
}

extension BookDetailViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return reviewList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: ViewControllerIds.BookReviewTableCell, for: indexPath) as! BookReviewTableCell
        
        let reviewData = reviewList[indexPath.row]
        cell.userNameLbl.text = (reviewData.user?.firstname)! + " " + (reviewData.user?.lastname)!
     
        
        cell.profileImageBtn.setImage(UIImage(named: "profile_photo"), for: .normal)
        if reviewData.user?.user_image != nil {
            if reviewData.user?.viewprofile_pic == 0 {
                cell.profileImageBtn.sd_setImage(with: URL(string: Configurator.imageBaseUrl + (reviewData.user?.user_image)!), for: .normal, placeholderImage: UIImage(named: "profile_photo"))
            }
        }
        
        cell.profileImageBtn.tag = indexPath.row
        cell.profileImageBtn.addTarget(self, action: #selector(actionViewUserProfile(sender:)), for: .touchUpInside)

        let str = reviewData.created_at?.components(separatedBy: "T")[0]
        let date = CommonFunctions.sharedInstance.generateDate(str!, format: .format11)
        let strDate = CommonFunctions.sharedInstance.generateDateString(date, format: .format6)
        cell.reviewDateLbl.text = strDate
        cell.reviewDescriptionLbl.text = reviewData.description!
        
        cell.ratingView.rating = reviewData.rating!
        cell.ratingView.text = "\((Float(reviewData.rating!)))"
        cell.likeBtn.tag = indexPath.row
        cell.likeBtn.setImage(UIImage(named: "like_white-1")?.withRenderingMode(.alwaysTemplate), for: .normal)
        if reviewData.is_Like == true {
            cell.likeBtn.tintColor = appThemeColor
        } else {
            cell.likeBtn.tintColor = UIColor.white
        }
        cell.likeBtn.setTitleColor(UIColor.white, for: .normal)
        
        cell.likeBtn.addTarget(self, action: #selector(actionLikeUnlikeReview(sender:)), for: .touchUpInside)
        if (reviewData.likeCount)! > 0 {
            cell.likeBtn.setTitle(" \((reviewData.likeCount)!) ", for: .normal)
        } else {
            cell.likeBtn.setTitle("  ", for: .normal)
        }
        
        if (reviewData.commentCount)! > 0 {
            cell.commentBtn.setTitle(" \((reviewData.commentCount)!) ", for: .normal)
        } else {
            cell.commentBtn.setTitle("  ", for: .normal)
        }
        cell.commentBtn.addTarget(self, action: #selector(actionViewUserReview(sender:)), for: .touchUpInside)
        return cell
    }
    
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.navigateToUserReview(reviewId: "\(reviewList[indexPath.row].id!)")
    }
}

