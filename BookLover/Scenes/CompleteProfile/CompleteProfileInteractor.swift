//
//  CompleteProfileInteractor.swift
//  BookLover
//
//  Created by ios 7 on 10/05/18.
//  Copyright (c) 2018 iOS Team. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CompleteProfileBusinessLogic
{
    func countryListData()
    func stateListData(request: CompleteProfile.Request.State)
    func getUserInfoData(request: CompleteProfile.Request.UserInfo, isUpdating: Bool)
    func updateProfieData(request: CompleteProfile.Request.UpdateProfile)
}

protocol CompleteProfileDataStore
{
  var isSetting: Bool? { get set }
}

class CompleteProfileInteractor: CompleteProfileBusinessLogic, CompleteProfileDataStore
{
    var presenter: CompleteProfilePresentationLogic?
    var worker: CompleteProfileWorker?
     var isSetting: Bool?
    
    // MARK: Do something
    
    func countryListData()
    {
        worker = CompleteProfileWorker()
        worker?.hitCountryApi(apiResponse: { (response) in
            let data = response.result as! NSDictionary
            if let list = (data["countries"] as? [[String:Any]]) {
                let resultData = NSKeyedArchiver.archivedData(withRootObject: list)
                userDefault.set(resultData, forKey: userDefualtKeys.countryList.rawValue)
            }
        })
    }
    
    func stateListData(request: CompleteProfile.Request.State)
    {
        worker = CompleteProfileWorker()
        worker?.hitStateApi(request: request, apiResponse: { (response) in
            self.presenter?.presentStateResponse(response: response)
        })
    }
    
    func getUserInfoData(request: CompleteProfile.Request.UserInfo, isUpdating: Bool)
    {
        worker = CompleteProfileWorker()
        worker?.hitUserInfoApi(request: request, apiResponse: { (response) in
            if response.code == SuccessCode {
                
                let resultDict = response.result as! [String:Any]
                var userInfo = resultDict["userInfo"] as! [String:Any]
                userInfo.updateValue(resultDict["pendingBooks"] as! Int, forKey: "pendingBooks")
                userInfo.updateValue(resultDict["readingBooks"] as! Int, forKey: "readingBooks")
                userInfo.updateValue(resultDict["readBooks"] as! Int, forKey: "readBooks")
                userInfo.updateValue(resultDict["favouriteBooks"] as! Int, forKey: "favouriteBooks")
                userInfo.updateValue(resultDict["totalBooks"] as! Int, forKey: "totalBooks")
                
                let resultData = NSKeyedArchiver.archivedData(withRootObject: userInfo)
                userDefault.set(resultData, forKey: userDefualtKeys.userObject.rawValue)
                appDelegateObj.unarchiveUserData()
            }
            self.presenter?.presentUserInfoResponse(response: response, isUpdating: isUpdating)
        })
    }
    
    
    func updateProfieData(request: CompleteProfile.Request.UpdateProfile)
    {
        worker = CompleteProfileWorker()
        if (request.age?.count)! > 0 {
            let age = Int((request.age)!)
            if (age! > maxAge) && (minAge <= age!) {
                CustomAlertController.sharedInstance.showErrorAlert(error: localizedTextFor(key: CompleteProfileValidationText.MaxAgeLimit.rawValue))
                return
            }
        }
        
        worker?.hitUpdateProfileApi(request: request, apiResponse: { (response) in
            self.presenter?.presentUpdateProfileResponse(response: response)
        })
    }
    
}
