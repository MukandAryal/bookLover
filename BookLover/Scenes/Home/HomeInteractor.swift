//
//  HomeInteractor.swift
//  BookLover
//
//  Created by ios 7 on 07/05/18.
//  Copyright (c) 2018 iOS Team. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic
{
    func getUserInfoData(request: CompleteProfile.Request.UserInfo)
    func getUserDashBoradData()
    func setFavouriteUnfavoriteData(request: Home.Request.Favourite)
}

protocol HomeDataStore
{
  //var name: String { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore
{
  var presenter: HomePresentationLogic?
  var worker: HomeWorker?
  //var name: String = ""
  
  // MARK: Do something
    
    func getUserInfoData(request: CompleteProfile.Request.UserInfo)
    {
        let worker = CompleteProfileWorker()
        worker.hitUserInfoApi(request: request, apiResponse: { (response) in
            if response.code == SuccessCode {
                
                let resultDict = response.result as! [String:Any]
                var userInfo = resultDict["userInfo"] as! [String:Any]
                userInfo.updateValue(resultDict["pendingBooks"] as! Int, forKey: "pendingBooks")
                userInfo.updateValue(resultDict["readingBooks"] as! Int, forKey: "readingBooks")
                userInfo.updateValue(resultDict["readBooks"] as! Int, forKey: "readBooks")
                userInfo.updateValue(resultDict["favouriteBooks"] as! Int, forKey: "favouriteBooks")
                userInfo.updateValue(resultDict["totalBooks"] as! Int, forKey: "totalBooks")
                
                let resultData = NSKeyedArchiver.archivedData(withRootObject: userInfo)
                userDefault.set(resultData, forKey: userDefualtKeys.userObject.rawValue)
                appDelegateObj.unarchiveUserData()
            }
        })
    }
    
    func getUserDashBoradData()
    {
        worker = HomeWorker()
        worker?.hitDashBoardApi(apiResponse: { (response) in
            self.presenter?.presentDashBoardResponse(response: response)
        })
    }
    
    func setFavouriteUnfavoriteData(request: Home.Request.Favourite)
    {
        worker = HomeWorker()
        
        let param: [String : Any] = ["id":request.id!,"user_id":request.user_id!,"is_favourite":request.is_favourite!]
        worker?.hitFavouriteUnfavouriteApi(
            request: param,
            apiResponse: { (response) in
            self.presenter?.presentFavUnfavResponse(
                response: response,
                atIndex: request.atIndex!)
        })
    }
    
    
}
