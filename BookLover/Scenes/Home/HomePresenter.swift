//
//  HomePresenter.swift
//  BookLover
//
//  Created by ios 7 on 07/05/18.
//  Copyright (c) 2018 iOS Team. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic
{
    func presentDashBoardResponse(response: ApiResponse)
    func presentFavUnfavResponse(response: ApiResponse, atIndex: Int8)
}

class HomePresenter: HomePresentationLogic
{
  weak var viewController: HomeDisplayLogic?
  weak var bookTableCell: BooksTableViewCellDisplayLogic?
  
  // MARK: Do something
    func presentDashBoardResponse(response: ApiResponse) {
        
        var viewModel = Home.ViewModel()
        if response.code == SuccessCode {
            
            var cat_List = [Home.ViewModel.Categories]()
            var rb_List = [Home.ViewModel.RecentBooks]()
            var pb_List = [Home.ViewModel.PopularBooks]()

            let result = response.result as! NSDictionary
            for catObj in (result["categories"] as? [[String:Any]])! {
                
                let catModel = Home.ViewModel.Categories(
                    id: catObj["id"] as? Int,
                    name: catObj["name"] as? String,
                    description: catObj["description"] as? String,
                    category_image: catObj["category_image"] as? String,
                    status: catObj["status"] as? Bool,
                    is_deleted: catObj["is_deleted"] as? Bool)
                cat_List.append(catModel)
            }
            
            for rbObj in (result["recentBooks"] as? [[String:Any]])! {
                
                var review = [Home.ViewModel.RecentBooks.Reviews]()
                var shelfList = [Home.ViewModel.RecentBooks.Shelves]()
                
                if rbObj["shelves"] != nil {
                    
                    for shelfObj in (rbObj["shelves"] as? [[String:Any]])! {
                        
                        let shelf = Home.ViewModel.RecentBooks.Shelves(
                            id: shelfObj["id"] as? Int,
                            user_id: shelfObj["user_id"] as? Int,
                            book_id: shelfObj["book_id"] as? Int,
                            shelf_status: shelfObj["shelf_status"] as? Int,
                            is_favourite: shelfObj["is_favourite"] as? Bool)
                        
                        shelfList.append(shelf)
                    }
                }
                
                
                //for revObj in (rbObj["reviews"] as? [[String:Any]])! {
                    let revModel = Home.ViewModel.RecentBooks.Reviews(
                        book_id: rbObj["id"] as? Int,
                        rating: rbObj["rating"] as? Double,
                        count: rbObj["review_count"] as? Int)
                    review.append(revModel)
               // }
                
                let rbModel = Home.ViewModel.RecentBooks(
                    
                    id: rbObj["id"] as? Int,
                    name: rbObj["name"] as? String,
                    isbn_no: rbObj["isbn_no"] as? String,
                    category_id: rbObj["category_id"] as? Int,
                    author_name: rbObj["author_name"] as? String,
                    pages: rbObj["pages"] as? Int,
                    description: rbObj["description"] as? String,
                    cover_photo: rbObj["cover_photo"] as? String,
                    publisher_name: rbObj["publisher_name"] as? String,
                    country: rbObj["country"] as? String,
                    is_deleted: rbObj["is_deleted"] as? Bool,
                    created: rbObj["created"] as? String,
                    rating: rbObj["rating"] as? Double,
                    review_count: rbObj["review_count"] as? Int,
                    reviews: review,
                    shelves: shelfList)
                
                rb_List.append(rbModel)
                
            }
            
            for pbObj in (result["popularBooks"] as? [[String:Any]])! {
                
                var review = [Home.ViewModel.PopularBooks.Reviews]()
                var shelfList = [Home.ViewModel.PopularBooks.Shelves]()
                
                if pbObj["shelves"] != nil {
                    
                    for shelfObj in (pbObj["shelves"] as? [[String:Any]])! {
                        
                        let shelf = Home.ViewModel.PopularBooks.Shelves(
                            id: shelfObj["id"] as? Int,
                            user_id: shelfObj["user_id"] as? Int,
                            book_id: shelfObj["book_id"] as? Int,
                            shelf_status: shelfObj["shelf_status"] as? Int,
                            is_favourite: shelfObj["is_favourite"] as? Bool)
                        
                        shelfList.append(shelf)
                        
                    }
                }
                
                //for revObj in (pbObj["reviews"] as? [[String:Any]])! {
                    let revModel = Home.ViewModel.PopularBooks.Reviews(
                        book_id: pbObj["id"] as? Int,
                        rating: pbObj["rating"] as? Double,
                        count: pbObj["review_count"] as? Int)
                    review.append(revModel)
                //}
                
                let pbModel = Home.ViewModel.PopularBooks(
                    total_reviews: pbObj["total_reviews"] as? Int,
                    id: pbObj["id"] as? Int,
                    name: pbObj["name"] as? String,
                    isbn_no: pbObj["isbn_no"] as? String,
                    category_id: pbObj["category_id"] as? Int,
                    author_name: pbObj["author_name"] as? String,
                    pages: pbObj["pages"] as? Int,
                    description: pbObj["description"] as? String,
                    cover_photo: pbObj["cover_photo"] as? String,
                    publisher_name: pbObj["publisher_name"] as? String,
                    country: pbObj["country"] as? String,
                    is_deleted: pbObj["is_deleted"] as? Bool,
                    created: pbObj["created"] as? String,
                    rating: pbObj["rating"] as? Double,
                    review_count: pbObj["review_count"] as? Int,
                    reviews: review,
                    shelves: shelfList)
                
                pb_List.append(pbModel)
            }
            
            let notification_count = result["new_notifications"] as? Int
            
            userDefault.set(notification_count, forKey: userDefualtKeys.notificationCount.rawValue)
            
            viewModel = Home.ViewModel(
                categoriesList: cat_List,
                recentBookList: rb_List,
                popularBookList: pb_List,
                error: nil)
            
        } else {
            
           viewModel = Home.ViewModel(
            categoriesList: nil,
            recentBookList: nil,
            popularBookList: nil,
            error: response.error)
        }
        viewController?.displayDashBoardResponse(viewModel: viewModel)
    }
    
    func presentFavUnfavResponse(response: ApiResponse, atIndex: Int8)  {
        
        var model = Home.Favourite()
        if response.code == SuccessCode {
            model = Home.Favourite(message: "", error: nil)
        } else {
            model = Home.Favourite(message: nil, error: response.error)
        }
        
        bookTableCell?.displayFavUnfavResponse(viewModel: model, atIndex: atIndex)
    }

}
