//
//  HomeViewController.swift
//  BookLover
//
//  Created by ios 7 on 07/05/18.
//  Copyright (c) 2018 iOS Team. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Crashlytics

typealias BookPopUpCompletion = (_ isWriteReview: Bool, _ onBook: String?) -> ()

protocol HomeDisplayLogic: class
{
    func displayDashBoardResponse(viewModel: Home.ViewModel)
}

class HomeViewController: BaseViewControllerUser, HomeDisplayLogic
{
  var interactor: HomeBusinessLogic?
  var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
  var dataModel = Home.ViewModel()
  private let refreshControl = UIRefreshControl()

    
    @IBOutlet var tblAllBooks: UITableView!
    
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = HomeInteractor()
    let presenter = HomePresenter()
    let router = HomeRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
  }
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if CommonFunctions.sharedInstance.isUserLoggedIn() == true  {
            getUserData()
            self.navigationController?.isNavigationBarHidden = false
        }
        getDashBoardrData()
        setUpUIDesign()
    }
    
  // MARK: Helper --
  
  //@IBOutlet weak var nameTextField: UITextField!
    
    func setUpUIDesign() {
        
        CustomNavigationItems.sharedInstance.setNavigationBarApperrance(onVC: self, withTitle: localizedTextFor(key: SceneTitleText.HomeSceneTitle.rawValue))
        
        if CommonFunctions.sharedInstance.isUserLoggedIn() == true {
            addSlideMenuButton()
        } else {
             self.navigationItem.leftBarButtonItem = UIBarButtonItem()
        }
        
        CustomNavigationItems.sharedInstance.rightBarButton(onVC: self)
        
        if #available(iOS 11.0, *) {
            tblAllBooks.refreshControl = refreshControl
        } else {
            tblAllBooks.addSubview(refreshControl)
        }
        
        refreshControl.tintColor = appThemeColor
        refreshControl.addTarget(self, action: #selector(refreshEventsData(_:)), for: .valueChanged)
    }
  
    
    @objc private func refreshEventsData(_ sender: Any) {
        refreshControl.beginRefreshing()
        getDashBoardrData()
    }
    
    func performBookPopUpAction() -> BookPopUpCompletion {
        
        return { [unowned self] isWriteReview, onBook  in
            if isWriteReview == true {
                self.router?.navigateToRatingView(bookId: onBook!)
            }
            else {
                return
            }
        }
    }
    
    // MARK: -- Request Methods --
    
    func getUserData() {
        
        let userId = userDefault.value(forKeyPath: userDefualtKeys.user_Id.rawValue) as! Int16
            interactor?.getUserInfoData(request: CompleteProfile.Request.UserInfo(user_Id: "\(userId)"))
    }
    
    func getDashBoardrData() {
        interactor?.getUserDashBoradData()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
    }
    
    // MARK -- Response Methods --
    
    func displayDashBoardResponse(viewModel: Home.ViewModel) {
        refreshControl.endRefreshing()
        if viewModel.error != nil {
            CustomAlertController.sharedInstance.showErrorAlert(error: viewModel.error!)
        } else {
            dataModel = viewModel
            CustomNavigationItems.sharedInstance.rightBarButton(onVC: self)
            tblAllBooks.reloadData()
        }
    }
}

extension HomeViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        var childCellWidth:CGFloat = 0
        if indexPath.row == 0 {
           // childCellWidth = (TotalWidth-40)/2.15
            return 80
        } else {
            childCellWidth = (TotalWidth-50)/2.30
            return (childCellWidth*1.72)+55
        }
    }
    
}

extension HomeViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 3
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if indexPath.row == 0 {
            
            let cell = tableView.dequeueReusableCell(withIdentifier: ViewControllerIds.BookCategoryTableCell) as! BookCategoryTableViewCell
            
            if dataModel.categoriesList != nil {
                cell.arrCategory = (dataModel.categoriesList)!
                cell.bookCategoryCollectionView.reloadData()
            } else {
                cell.arrCategory = []
            }
            cell.vcObj = self
            return cell
            
        } else {
            
            let cell = tableView.dequeueReusableCell(withIdentifier: ViewControllerIds.BooksTableCell) as! BooksTableViewCell
            cell.lblTitle.textColor = appThemeColor
            cell.btnViewAll.setTitle(localizedTextFor(key: HomeSceneText.ViewAllTitle.rawValue), for: .normal)
            if indexPath.row == 1 {
                
                cell.isRecently = true
                cell.lblTitle.text = localizedTextFor(key: HomeSceneText.RecentlyAddedTitle.rawValue)
                if dataModel.recentBookList != nil {
                    cell.arrRecent = (dataModel.recentBookList)!
                    cell.booksCollectionView.reloadData()
                } else {
                    cell.arrRecent = []
                }
                
            } else {
                
                cell.isRecently = false
                cell.lblTitle.text = localizedTextFor(key: HomeSceneText.MostPopularTitle.rawValue)

                if dataModel.popularBookList != nil {
                    cell.arrPopular = (dataModel.popularBookList)!
                    cell.booksCollectionView.reloadData()
                } else {
                    cell.arrPopular = []
                }
            }
            cell.vcObj = self
            return cell
        }
        
    }
    
}
